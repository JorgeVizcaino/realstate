// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealState.Infrastructure.Persistence;

namespace RealState.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210316015139_InitialMigrations")]
    partial class InitialMigrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("county")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("district")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zipPlus4")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address","DBO");
                });

            modelBuilder.Entity("RealState.Domain.Entities.ApplianceOwnership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dishwasher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dryer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("microwave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("refrigerator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stove")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("washer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplianceOwnership");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Audios", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResourcesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResourcesId");

                    b.ToTable("Audios");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Diligences", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Diligences");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Financial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("capRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("isCashOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("isSection8")
                        .HasColumnType("bit");

                    b.Property<DateTime>("leaseEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("leaseStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("listPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("marketValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("monthlyHoa")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("monthlyManagementFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("monthlyRent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("netYield")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("occupancy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("rehabCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("rehabDate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("salePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("turnOverFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("yearlyInsuranceCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("yearlyPropertyTaxes")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Financial");
                });

            modelBuilder.Entity("RealState.Domain.Entities.FloorPlan", b =>
                {
                    b.Property<int>("IdFloorPlan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResourcesId")
                        .HasColumnType("int");

                    b.Property<string>("contentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("guid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isPublic")
                        .HasColumnType("bit");

                    b.Property<string>("resourceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sizeInByte")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("textContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("urlMedium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("urlSmall")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFloorPlan");

                    b.HasIndex("ResourcesId");

                    b.ToTable("FloorPlan");
                });

            modelBuilder.Entity("RealState.Domain.Entities.GoogleMapOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("hasStreetView")
                        .HasColumnType("bit");

                    b.Property<int>("povHeading")
                        .HasColumnType("int");

                    b.Property<double>("povLatitude")
                        .HasColumnType("float");

                    b.Property<double>("povLongitude")
                        .HasColumnType("float");

                    b.Property<int>("povPitch")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GoogleMapOption");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Lease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("applianceOwnershipId")
                        .HasColumnType("int");

                    b.Property<int?>("leaseSummaryId")
                        .HasColumnType("int");

                    b.Property<int?>("utilitiesOwnershipId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("applianceOwnershipId");

                    b.HasIndex("leaseSummaryId");

                    b.HasIndex("utilitiesOwnershipId");

                    b.ToTable("Lease");
                });

            modelBuilder.Entity("RealState.Domain.Entities.LeaseSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("hasPet")
                        .HasColumnType("bit");

                    b.Property<bool?>("isLeaseConcessions")
                        .HasColumnType("bit");

                    b.Property<bool>("isPetsDeposit")
                        .HasColumnType("bit");

                    b.Property<bool>("isRentersInsuranceRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("isSection8")
                        .HasColumnType("bit");

                    b.Property<bool>("isTenantBackgroundChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("isTenantIncomeAbove3x")
                        .HasColumnType("bit");

                    b.Property<bool?>("isTenantMayTerminateEarly")
                        .HasColumnType("bit");

                    b.Property<bool?>("isTenantPurchaseOption")
                        .HasColumnType("bit");

                    b.Property<DateTime>("leaseEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("leaseStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("leasingStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("marketedRent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("monthlyRent")
                        .HasColumnType("float");

                    b.Property<string>("occupancy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("petFeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("petsDepositAmount")
                        .HasColumnType("float");

                    b.Property<double?>("securityDepositAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("LeaseSummary");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResourcesId")
                        .HasColumnType("int");

                    b.Property<string>("contentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("guid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isPublic")
                        .HasColumnType("bit");

                    b.Property<string>("resourceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("sizeInByte")
                        .HasColumnType("int");

                    b.Property<string>("textContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("urlMedium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("urlSmall")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhotoId");

                    b.HasIndex("ResourcesId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Physical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("bathRooms")
                        .HasColumnType("float");

                    b.Property<double>("bedRooms")
                        .HasColumnType("float");

                    b.Property<bool>("isPool")
                        .HasColumnType("bit");

                    b.Property<int?>("lotSize")
                        .HasColumnType("int");

                    b.Property<string>("parcelNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("squareFeet")
                        .HasColumnType("int");

                    b.Property<string>("stories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("units")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("yearBuilt")
                        .HasColumnType("int");

                    b.Property<string>("zipYearBuilt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Physical");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("accountId")
                        .HasColumnType("int");

                    b.Property<int?>("addressId")
                        .HasColumnType("int");

                    b.Property<bool>("allowRentGuaranteedOptout")
                        .HasColumnType("bit");

                    b.Property<string>("allowableSaleTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("allowedFundingTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("buyerAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("buyerUserId")
                        .HasColumnType("int");

                    b.Property<string>("certificationLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("daysOnMarket")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("diligenceVaultSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("escrowClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("externalId")
                        .HasColumnType("int");

                    b.Property<string>("featuredReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("financialId")
                        .HasColumnType("int");

                    b.Property<int?>("googleMapOptionId")
                        .HasColumnType("int");

                    b.Property<bool>("hasAudio")
                        .HasColumnType("bit");

                    b.Property<bool>("hasDiligenceVaultDocuments")
                        .HasColumnType("bit");

                    b.Property<string>("highlights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("inspectionType")
                        .HasColumnType("int");

                    b.Property<bool>("isAllowOffer")
                        .HasColumnType("bit");

                    b.Property<bool>("isAllowPreview")
                        .HasColumnType("bit");

                    b.Property<bool?>("isBargain")
                        .HasColumnType("bit");

                    b.Property<bool>("isDiligenceVaultUnlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("isDwellCertified")
                        .HasColumnType("bit");

                    b.Property<bool>("isFeatured")
                        .HasColumnType("bit");

                    b.Property<bool?>("isHoa")
                        .HasColumnType("bit");

                    b.Property<bool>("isHot")
                        .HasColumnType("bit");

                    b.Property<bool>("isNew")
                        .HasColumnType("bit");

                    b.Property<bool?>("isPropertyManagerOfferRetain")
                        .HasColumnType("bit");

                    b.Property<bool>("isRentGuaranteed")
                        .HasColumnType("bit");

                    b.Property<bool>("isSecuritized")
                        .HasColumnType("bit");

                    b.Property<double?>("latitude")
                        .HasColumnType("float");

                    b.Property<int?>("leaseId")
                        .HasColumnType("int");

                    b.Property<double?>("longitude")
                        .HasColumnType("float");

                    b.Property<string>("mainImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("manager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("market")
                        .HasColumnType("int");

                    b.Property<string>("personalProperties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("physicalId")
                        .HasColumnType("int");

                    b.Property<string>("priceVisibility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("programId")
                        .HasColumnType("int");

                    b.Property<string>("propertyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("propertyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("resourcesId")
                        .HasColumnType("int");

                    b.Property<int?>("scoreId")
                        .HasColumnType("int");

                    b.Property<string>("seller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sellerBroker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("valuationid")
                        .HasColumnType("int");

                    b.Property<string>("visibility")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyId");

                    b.HasIndex("addressId");

                    b.HasIndex("financialId");

                    b.HasIndex("googleMapOptionId");

                    b.HasIndex("leaseId");

                    b.HasIndex("physicalId");

                    b.HasIndex("resourcesId");

                    b.HasIndex("scoreId");

                    b.HasIndex("valuationid");

                    b.ToTable("Property","DBO");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Resources", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("charterSchoolScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("conditionScore")
                        .HasColumnType("int");

                    b.Property<string>("crimeScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("floodRiskScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("neighborhoodScore")
                        .HasColumnType("int");

                    b.Property<decimal?>("overallScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("qualityScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("schoolScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("walkabilityScore")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Score");
                });

            modelBuilder.Entity("RealState.Domain.Entities.ThreeDRendering", b =>
                {
                    b.Property<int>("ThreeDRenderingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResourcesId")
                        .HasColumnType("int");

                    b.Property<string>("contentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("guid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isPublic")
                        .HasColumnType("bit");

                    b.Property<string>("resourceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sizeInByte")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("textContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("urlMedium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("urlSmall")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ThreeDRenderingId");

                    b.HasIndex("ResourcesId");

                    b.ToTable("ThreeDRendering");
                });

            modelBuilder.Entity("RealState.Domain.Entities.UtilitiesOwnership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("electric")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("garbage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("landscaping")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pestControl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("water")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UtilitiesOwnership");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Valuation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("avmBpoAdjValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("avmBpoDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("avmBpoValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("rsAvmDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("rsAvmValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("rsBpoMergeValue")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.ToTable("Valuation");
                });

            modelBuilder.Entity("RealState.Infrastructure.Identity.ApplicationRol", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("RealState.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("RealState.Infrastructure.Identity.ApplicationRol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RealState.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RealState.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("RealState.Infrastructure.Identity.ApplicationRol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealState.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RealState.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealState.Domain.Entities.Audios", b =>
                {
                    b.HasOne("RealState.Domain.Entities.Resources", null)
                        .WithMany("audios")
                        .HasForeignKey("ResourcesId");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Diligences", b =>
                {
                    b.HasOne("RealState.Domain.Entities.Property", null)
                        .WithMany("diligences")
                        .HasForeignKey("PropertyId");
                });

            modelBuilder.Entity("RealState.Domain.Entities.FloorPlan", b =>
                {
                    b.HasOne("RealState.Domain.Entities.Resources", null)
                        .WithMany("floorPlans")
                        .HasForeignKey("ResourcesId");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Lease", b =>
                {
                    b.HasOne("RealState.Domain.Entities.ApplianceOwnership", "applianceOwnership")
                        .WithMany()
                        .HasForeignKey("applianceOwnershipId");

                    b.HasOne("RealState.Domain.Entities.LeaseSummary", "leaseSummary")
                        .WithMany()
                        .HasForeignKey("leaseSummaryId");

                    b.HasOne("RealState.Domain.Entities.UtilitiesOwnership", "utilitiesOwnership")
                        .WithMany()
                        .HasForeignKey("utilitiesOwnershipId");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Photo", b =>
                {
                    b.HasOne("RealState.Domain.Entities.Resources", null)
                        .WithMany("photos")
                        .HasForeignKey("ResourcesId");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Property", b =>
                {
                    b.HasOne("RealState.Domain.Entities.Address", "address")
                        .WithMany()
                        .HasForeignKey("addressId");

                    b.HasOne("RealState.Domain.Entities.Financial", "financial")
                        .WithMany()
                        .HasForeignKey("financialId");

                    b.HasOne("RealState.Domain.Entities.GoogleMapOption", "googleMapOption")
                        .WithMany()
                        .HasForeignKey("googleMapOptionId");

                    b.HasOne("RealState.Domain.Entities.Lease", "lease")
                        .WithMany()
                        .HasForeignKey("leaseId");

                    b.HasOne("RealState.Domain.Entities.Physical", "physical")
                        .WithMany()
                        .HasForeignKey("physicalId");

                    b.HasOne("RealState.Domain.Entities.Resources", "resources")
                        .WithMany()
                        .HasForeignKey("resourcesId");

                    b.HasOne("RealState.Domain.Entities.Score", "score")
                        .WithMany()
                        .HasForeignKey("scoreId");

                    b.HasOne("RealState.Domain.Entities.Valuation", "valuation")
                        .WithMany()
                        .HasForeignKey("valuationid");
                });

            modelBuilder.Entity("RealState.Domain.Entities.ThreeDRendering", b =>
                {
                    b.HasOne("RealState.Domain.Entities.Resources", null)
                        .WithMany("threeDRenderings")
                        .HasForeignKey("ResourcesId");
                });
#pragma warning restore 612, 618
        }
    }
}
